#+TITLE: config
#+PROPERTY: header-args :tangle config.el
* personal info
#+begin_src emacs-lisp
(setq user-full-name "Jigang Li"
      user-mail-address "ljg16654@sjtu.edu.cn"
)
#+end_src

* font
Doom exposes five (optional) variables for controlling fonts in Doom. Here
are the three important ones:
+ `doom-font'
+ `doom-variable-pitch-font'
+ `doom-big-font' -- used for `doom-big-font-mode'; use this for
  presentations or streaming.

They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
font string. You generally only need these two:
#+begin_src  emacs-lisp :tangle nil
(setq doom-font (font-spec :family "monospace" :size 12 :weight 'semi-light)
       doom-variable-pitch-font (font-spec :family "sans" :size 13))
#+end_src

The currently preferred monospace fonts are
+ monospace
+ Fira mono
+ iconsolata
#+begin_src emacs-lisp
(setq doom-font (font-spec :family "Monaco for Powerline" :size 34 :weight 'light)
      doom-variable-pitch-font (font-spec :family "GentiumAlt" :size 38)
      )
(setq-default line-spacing 0.5)
#+end_src

#+RESULTS:
: 0.5

For mixed font to be activated, =mixed-pitch-mode= should be activated. However, the current version doesn't support change of height of fixed-pitch font.
[[https://gitlab.com/jabranham/mixed-pitch/-/issues/6][related issue]]
The author provided a patch to disable fixed height of /fixed-pitch-font/.

* org-mode
** =org-fancy-priorities=
The package provides good-looking icons before level headings.
#+begin_src emacs-lisp
(use-package! org-fancy-priorities
  :hook
  (org-mode . org-fancy-priorities-mode)
  :config
  (setq org-fancy-priorities-list '("⚡" "⬆" "⬇" "☕")))
#+end_src
** gtd
#+begin_src emacs-lisp
(after! org
  (setq org-todo-keywords '((sequence "TODO(t)" "INPROGRESS(i)" "WAITING(w)" "|" "DONE(d!)" "CANCELLED(c!)"))
        org-priority-faces '((?A :foreground "#e45649")
                             (?B :foreground "#da8548")
                             (?C :foreground "#0098dd"))
        ;; org-latex-minted-options '(("frame" "lines") ("linenos=true"))
        org-journal-file-format "%Y-%m-%d.org"
        org-format-latex-options (plist-put org-format-latex-options :scale 4.0)
        org-agenda-files (apply #'append
			        (mapcar
			         (lambda (directory)
				        (directory-files-recursively directory org-agenda-file-regexp))
			            '("~/org/")))
        )
  (add-to-list 'org-modules 'org-habit)
  )

#+end_src
#+RESULTS:
| org-habit | ol-bibtex |
** image/doc
*** TODO support for pdf and eps images
#+begin_src emacs-lisp :tangle nil
;; Suggested on the org-mode maillist by Julian Burgos
(add-to-list 'image-file-name-extensions "pdf")
(add-to-list 'image-file-name-extensions "eps")
(add-to-list 'image-type-file-name-regexps '("\\.eps\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "eps")
(add-to-list 'image-type-file-name-regexps '("\\.pdf\\'" . imagemagick))
(add-to-list 'image-file-name-extensions "pdf")
#+end_src
** latex
*** remove =org-latex= cache
#+begin_src emacs-lisp
(defun org-latex-delete-cache () (interactive)
       (delete-directory "~/.emacs.d/.local/cache/org-latex" :RECURSIVE t))
#+end_src

#+RESULTS:
: org-latex-delete-cache

*** TODO LaTeX export support for minted env
** org-capture
*** basic settings
#+begin_src emacs-lisp
(map! :desc "capture!" :ne "C-c c" #'org-capture)
#+end_src
Emacs-style keybinding are preferred over vim-style keybinding in quick capturing:
|---------+----------|
| key     | function |
|---------+----------|
| C-c C-d | deadline |
| C-c C-s | schedule |
|---------+----------|
As these are already fast enough, it's not considered necessary to include schedules or deadline in some template that require more than 1 keystroke.
*** TODO template: add learning-centralized template
+ Expansions:
|----------------------------+----------------------------------------------|
| symbol                     | expansion                                    |
|----------------------------+----------------------------------------------|
| %a                         | current buffer position?                     |
| %t                         | time(active, for scheduling, deadline, etc.) |
| %^t                        | prompt for time with popup calender          |
| %i                         | &optional active region                      |
| %{description and options} | prompt for an option                         |
| \n                         | eol                                          |
| %?                         | cursor location                              |
| %U                         | inactive time stamp                          |
| %^[gG]                     | prompt for tags, G being more powerful       |
|----------------------------+----------------------------------------------|
+ Propreties:
|---------------------------------------+-------------------------|
| property                              | meaning                 |
|---------------------------------------+-------------------------|
| :prepend                              | add to beginning?       |
| :clock-in, :clock-keep, :clock-resume | start clock in the item |
|---------------------------------------+-------------------------|

[[file:~/.emacs.d/modules/lang/org/config.el::org-capture-templates]]

=org-store-link=, binded to =SPC n l= by default, can store a link that can be later called by =org-insert-link=. Use such shortkey won't add much pressure and sometimes a link is not needed. Therefore, I prefer not to use =%a= insertion in journal templates.

By default, the =:prepend= properties is activated for journal. I cannot quite understand how it makes sense so it's disabled.

A few words to explain the "jc" template: =:clock-in= property starts timing when the template is called, timing starts no matter if a clocking is already running. In this case, one can use
+ do nothing :: the clock stops when the capture ends. The capture usually lasts less than a minute, so nothing informative on time consumption is recorded.
+ use =:clock-resume= :: Continue timing of the interrupted clock if such interrupted clock exists.
+ use =:clock-keep= :: Continue timing the captured event.
+ use both =:clock-resume= and =:clock-keep= :: make no sense as it's equivalent to using =:clock_keep=.

#+begin_src emacs-lisp
(setq org-capture-templates
        '(("t" "Personal t" entry
           (file+headline +org-capture-todo-file "Inbox")
              "* TODO [%^{Select the urgency|A|B|C}] %?\n%i\n%a\n" :prepend t)

          ("n" "Personal notes" entry
           (file+headline +org-capture-notes-file "Inbox")
              "* %u %?\n%i\n%a" :prepend t)

          ;; declare root node j
          ("j" "Journal")

          ("ja" "Journal arbitrary recording" entry
           (file+olp+datetree +org-capture-journal-file)
              "* %?\n%u\n%i" :tree-type week)

          ("jc" "journal clock into something new" entry
           (file+olp+datetree +org-capture-journal-file)
              "* %?" :clock-in t :clock-keep t :tree-type week)

          ("jn" "journal edit the task currently clocked in" plain
           (clock) "%?" :unnarrowed t)

          ("r" "read later" checkitem
           (file "read-later.org")
              "[ ] %? ")
))
#+end_src

#+RESULTS:
| t | Personal t | entry | (file+headline +org-capture-todo-file Inbox) | * TODO [%^{Select the urgency | A | B | C}] %? |

*** templates for reference
Doom provides a list of project-oriented capture templates but I don 't want to use them right now
#+begin_src emacs-lisp :tangle nil
          ;; Will use {project-root}/{todo,notes,changelog}.org, unless a
          ;; {todo,notes,changelog}.org file is found in a parent directory.
          ;; Uses the basename from `+org-capture-todo-file',
          ;; `+org-capture-changelog-file' and `+org-capture-notes-file'.
'(("p" "Templates for projects")
          ("pt" "Project-local todo" entry  ; {project-root}/todo.org
           (file+headline +org-capture-project-todo-file "Inbox")
           "* TODO %?\n%i\n%a" :prepend t)
          ("pn" "Project-local notes" entry  ; {project-root}/notes.org
           (file+headline +org-capture-project-notes-file "Inbox")
           "* %U %?\n%i\n%a" :prepend t)
          ("pc" "Project-local changelog" entry  ; {project-root}/changelog.org
           (file+headline +org-capture-project-changelog-file "Unreleased")
           "* %U %?\n%i\n%a" :prepend t)

          ;; Will use {org-directory}/{+org-capture-projects-file} and store
          ;; these under {ProjectName}/{Tasks,Notes,Changelog} headings. They
          ;; support `:parents' to specify what headings to put them under, e.g.
          ;; :parents ("Projects")
          ("o" "Centralized templates for projects")
          ("ot" "Project todo" entry
           (function +org-capture-central-project-todo-file)
           "* TODO %?\n %i\n %a"
           :heading "Tasks"
           :prepend nil)
          ("on" "Project notes" entry
           (function +org-capture-central-project-notes-file)
           "* %U %?\n %i\n %a"
           :heading "Notes"
           :prepend t)
          ("oc" "Project changelog" entry
           (function +org-capture-central-project-changelog-file)
           "* %U %?\n %i\n %a"
           :heading "Changelog"
           :prepend t))
#+end_src

From prot's config on Dec 17 2020 :
#+begin_src emacs-lisp :tangle nil
  (setq org-capture-templates
        (append org-capture-templates
        `(("a" "Article to write" entry
           (file+headline "tasks.org" "Writing list")
           ,(concat "* WRITE %^{Title} %^g\n"
                    "SCHEDULED: %^t\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n:END:\n\n"
                    "%i%?"))
          ("b" "Basic task for future review" entry
           (file+headline "tasks.org" "Basic tasks that need to be reviewed")
           ,(concat "* %^{Title}\n"
                    ":PROPERTIES:\n"
                    ":CAPTURED: %U\n"
                    ":END:\n\n"
                    "%i%l"))
          ;; ("t" "Task with a due date" entry
          ;;  (file+headline "tasks.org" "Task list with a date")
          ;;  ,(concat "* %^{Scope of task||TODO|STUDY|MEET} %^{Title} %^g\n"
          ;;           "SCHEDULED: %^t\n"
          ;;           ":PROPERTIES:\n:CAPTURED: %U\n:END:\n\n"
          ;;           "%i%?"))
          ("r" "Reply to an email" entry
           (file+headline "tasks.org" "Mail correspondence")
           ,(concat "* TODO [#B] %:subject :mail:\n"
                    "SCHEDULED: %t\n:"
                    "PROPERTIES:\n:CONTEXT: %a\n:END:\n\n"
                    "%i%?")))))
#+end_src

#+RESULTS:
| (a Article to write entry (file+headline tasks.org Writing list) * WRITE %^{Title} %^g |

** org-roam
*** basic settings
#+begin_src emacs-lisp
(setq org-roam-directory "~/org-roam")
#+end_src
*** templates
***** TODO wrap active region in source clock block
***** TODO insert current buffer location like =org-capture=
** clock
To save the clock history across Emacs sessions, use:
#+begin_src emacs-lisp
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
#+end_src

#+RESULTS:
| org-clock-save | eshell-save-some-history | eshell-save-some-last-dir | bookmark-exit-hook-internal | amx-save-to-file | flycheck-global-teardown | save-place-kill-emacs-hook | recentf-save-list | savehist-autosave | org-roam-db--close-all | org-id-locations-save | org-babel-remove-temporary-directory | transient-maybe-save-history | recentf-cleanup | keyfreq-mustsave--do | emms-score-save-hash | emms-cache-save | emms-history-save | doom-cleanup-project-cache-h | lsp--global-teardown | doom-persist-scratch-buffers-h | server-force-stop |

* helm
** helm-eshell
#+begin_src emacs-lisp
(require 'helm-eshell)
(add-hook 'eshell-mode-hook
          #'(lambda ()
              (define-key eshell-mode-map (kbd "M-l")  'helm-eshell-history)))
#+end_src
* lsp
For python:
#+begin_src emacs-lisp :tangle nil
(use-package lsp-jedi
  :config
  (with-eval-after-load "lsp-mode"
    (add-to-list 'lsp-disabled-clients 'pyls)
    (add-to-list 'lsp-enabled-clients 'jedi)))
#+end_src
#+begin_src emacs-lisp
(setq read-process-output-max 1048576)
#+end_src

#+begin_src emacs-lisp :tangle nil
(use-package lsp-pyright
  :hook (python-mode . (lambda ()
                          (require 'lsp-pyright)
                          (lsp))))  ; or lsp-deferred
#+end_src

#+begin_src emacs-lisp
(use-package lsp-python-ms
  :init (setq lsp-python-ms-auto-install-server t)
  :hook (python-mode . (lambda ()
                          (require 'lsp-python-ms)
                          (lsp))))  ; or lsp-deferred
#+end_src
* company-mode
#+begin_src emacs-lisp
(setq company-idle-delay 0.05)
(use-package company-box
  :hook (company-mode . company-box-mode))
#+end_src
* emms
#+begin_src emacs-lisp
(require 'emms-setup)
(emms-all)
(emms-default-players) ;; set up the list of the default players
;; where my music is?
(setq emms-source-file-default-directory "~/Music/")
;; shortcuts for emms
(after! emms
  (map! :desc "Select playlist" :ne "SPC a p" #'emms-add-playlist)
  (map! :desc "emms" :ne "SPC e m" #'emms)
  (append emms-player-mplayer-parameters (list "-novideo"))
  )
#+end_src
* lisp
#+begin_src emacs-lisp :tangle nil
(use-package parinfer
  :ensure t
  :bind
  (("C-," . parinfer-toggle-mode))
  :init
  (progn
    (setq parinfer-extensions
          '(defaults       ; should be included.
            pretty-parens  ; different paren styles for different modes.
            evil           ; If you use Evil.
            lispy          ; If you use Lispy. With this extension, you should install Lispy and do not enable lispy-mode directly.
            ;; paredit        ; Introduce some paredit commands.
            smart-tab      ; C-b & C-f jump positions and smart shift with tab & S-tab.
            smart-yank))   ; Yank behavior depend on mode.
    (add-hook 'clojure-mode-hook #'parinfer-mode)
    (add-hook 'emacs-lisp-mode-hook #'parinfer-mode)
    (add-hook 'common-lisp-mode-hook #'parinfer-mode)
    (add-hook 'scheme-mode-hook #'parinfer-mode)
    (add-hook 'lisp-mode-hook #'parinfer-mode)))
#+end_src
* input method
The configuration is currently disabled because of its slowliness.
** TODO learn from redguardtoo's configuration for Chinese input.
#+begin_src emacs-lisp :tangle nil
;; configuration of input method pyim
(use-package! pyim
  :ensure nil
  :demand t
  :config
  (use-package pyim-basedict
    :ensure nil
    :config (pyim-basedict-enable))
  (setq default-input-method "pyim")
  (setq pyim-default-scheme 'quanpin)
  (setq pyim-page-tooltip 'posframe)
  )
#+end_src
* dired
** basic settings
*** TODO: fixed failure of hide-detail
#+begin_src emacs-lisp
;; prot
(setq-default dired-hide-details-mode t)
(use-package dired
  :hook (dired-mode-hook . dired-hide-details-mode)
  :config
  (setq delete-by-moving-to-trash t)
  )
#+end_src

#+RESULTS:
| dired-hide-details-mode |
** TODO subtree
** peep-dired
#+begin_src emacs-lisp
(evil-define-key 'normal peep-dired-mode-map (kbd "j") 'peep-dired-next-file
                                             (kbd "k") 'peep-dired-prev-file)
(add-hook 'peep-dired-hook 'evil-normalize-keymaps)
#+end_src
** shortkeys
#+begin_src emacs-lisp
(defun goto-downloads () (interactive)
  "Open Downloads folder."
  (find-file "~/Downloads"))

(defun go-home () (interactive)
       "Open home directory."
       (find-file "~/"))
(map! :desc "goto-downloads" :ne "SPC d d" #'goto-downloads)
(map! :desc "goto-home" :ne "SPC d h" #'go-home)
(map! :desc "peep-dired" :ne "SPC d p" #'peep-dired)
#+end_src

#+RESULTS:

** TODO uncompress/unzip
* eshell
** environment variable for eshell (exclusive)
[[http://ergoemacs.org/emacs/eshell.html][Xah's tutorial]]
#+begin_src emacs-lisp :tangle nil
(setenv "PATH"
  (concat
   "/usr/local/cbc/bin" ";"
   (getenv "PATH") ; inherited from OS
  )
)
#+end_src
* browser
** default browser
#+begin_src emacs-lisp
(setq browse-url-browser-function 'browse-url-firefox)
#+end_src
** TODO fixed search with duckduckgo
* shortkeys
* theme
#+begin_src emacs-lisp
(load-theme 'doom-gruvbox-light t)
#+end_src

#+RESULTS:
: t
* docs
** TODO djvu
** nov
Emacs major mode for reading EPUB files.
#+begin_src emacs-lisp
(defun my-nov-font-setup ()
  (face-remap-add-relative 'variable-pitch :family "Liberation Serif"
                           :height 1.5))
(defun enlarge-left-fringe ()
  (setq left-fringe-width 30))
(add-hook 'nov-mode-hook 'my-nov-font-setup)
(add-hook 'nov-mode-hook 'enlarge-left-fringe)
#+end_src
** pdf
Activate =pdf-tools=.
#+begin_src emacs-lisp :tangle nil
(pdf-tools-install)
#+end_src

* eaf
#+begin_src emacs-lisp :tangle nil
(use-package eaf
  :load-path "~/repos/emacs-application-framework" ; Set to "/usr/share/emacs/site-lisp/eaf" if installed from AUR
  :custom
  (eaf-find-alternate-file-in-dired t)
  :config
  (eaf-bind-key scroll_up "C-n" eaf-pdf-viewer-keybinding)
  (eaf-bind-key scroll_down "C-p" eaf-pdf-viewer-keybinding)
  (eaf-bind-key take_photo "p" eaf-camera-keybinding))

(setq eaf-proxy-type "http")
(setq eaf-proxy-host "127.0.0.1")
(setq eaf-proxy-port "12333")
#+end_src

#+begin_src
export http_proxy="http://127.0.0.1:12333"
export https_proxy="http://127.0.0.1:12333"
#+end_src
* exwm
#+begin_src emacs-lisp :tangle nil
(defun efs/exwm-update-class ()
  (exwm-workspace-rename-buffer exwm-class-name))

(use-package exwm
  :config
  ;; Set the default number of workspaces
  (setq exwm-workspace-number 5)

  ;; When window "class" updates, use it to set the buffer name
  ;; (add-hook 'exwm-update-class-hook #'efs/exwm-update-class)

  ;; These keys should always pass through to Emacs
  (setq exwm-input-prefix-keys
    '(?\C-x
      ?\C-u
      ?\C-h
      ?\M-x
      ?\M-`
      ?\M-&
      ?\M-:
      ?\C-\M-j  ;; Buffer list
      ?\C-\ ))  ;; Ctrl+Space

  ;; Ctrl+Q will enable the next key to be sent directly
  (define-key exwm-mode-map [?\C-q] 'exwm-input-send-next-key)

  ;; Set up global key bindings.  These always work, no matter the input state!
  ;; Keep in mind that changing this list after EXWM initializes has no effect.
  (setq exwm-input-global-keys
        `(
          ;; Reset to line-mode (C-c C-k switches to char-mode via exwm-input-release-keyboard)
          ([?\s-r] . exwm-reset)

          ;; Move between windows
          ([s-left] . windmove-left)
          ([s-right] . windmove-right)
          ([s-up] . windmove-up)
          ([s-down] . windmove-down)

          ;; Launch applications via shell command
          ([?\s-&] . (lambda (command)
                       (interactive (list (read-shell-command "$ ")))
                       (start-process-shell-command command nil command)))

          ;; Switch workspace
          ([?\s-w] . exwm-workspace-switch)

          ;; 's-N': Switch to certain workspace with Super (Win) plus a number key (0 - 9)
          ,@(mapcar (lambda (i)
                      `(,(kbd (format "s-%d" i)) .
                        (lambda ()
                          (interactive)
                          (exwm-workspace-switch-create ,i))))
                    (number-sequence 0 9))))

  (exwm-enable))
#+end_src
* window rule
** window/buffer switch
#+begin_src emacs-lisp
(map! :desc "ace-window" :ne "SPC v" #'ace-window)
(map! :desc "next buffer" :ne "s-j" #'next-buffer)
(map! :desc "prev buffer" :ne "s-k" #'previous-buffer)
(map! :desc "other window" :ne "s-o" #'other-window)
(map! :desc "kill window and buffer" :ne "s-c" #'(lambda () (interactive)
                                                   (progn
                                                     (kill-current-buffer)
                                                     (+workspace/close-window-or-workspace))))
(map! :desc "prev window" :ne "s-O" #'(lambda () (interactive) (other-window -1)))
(map! :desc "ace-window" :ne "SPC j" #'evil-switch-to-windows-last-buffer)
#+end_src

#+RESULTS:
** window rules
#+begin_src emacs-lisp :tangle nil
(use-package window
  :init
  (setq display-buffer-alist
        '(;; top side window
          ("\\*Bongo-Elfeed Queue.*"
           (display-buffer-reuse-window display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . -2))
          ("\\*\\(elfeed-mpv-output\\|world-clock\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . -1))
          ("\\*\\(Flymake\\|Package-Lint\\|vc-git :\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 0)
           (window-parameters . ((no-other-window . t))))
          ("\\*Messages.*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 1)
           (window-parameters . ((no-other-window . t))))
          ("\\*\\(Backtrace\\|Warnings\\|Compile-Log\\)\\*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . top)
           (slot . 2)
           (window-parameters . ((no-other-window . t))))
          ;; bottom side window
          ("\\*\\(Output\\|Register Preview\\).*"
           (display-buffer-in-side-window)
           (window-width . 0.16)       ; See the :hook
           (side . bottom)
           (slot . -1)
           (window-parameters . ((no-other-window . t))))
          ("\\*\\(Completions\\|Embark Live Occur\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . bottom)
           (slot . 0)
           (window-parameters . ((no-other-window . t))))
          (".*\\(e?shell\\|vterm\\).*"
           (display-buffer-in-side-window)
           (window-height . 0.16)
           (side . bottom)
           (slot . 1))
          ;; left side window
          ("\\*Help.*"
           (display-buffer-in-side-window)
           (window-width . 0.20)       ; See the :hook
           (side . left)
           (slot . 0)
           (window-parameters . ((no-other-window . t))))
          ;; right side window
          ("\\*Faces\\*"
           (display-buffer-in-side-window)
           (window-width . 0.25)
           (side . right)
           (slot . 0)
           (window-parameters
            . ((no-other-window . t)
               (mode-line-format
                . (" "
                   mode-line-buffer-identification)))))
          ("\\*Custom.*"
           (display-buffer-in-side-window)
           (window-width . 0.25)
           (side . right)
           (slot . 1))
          ;; bottom buffer (NOT side window)
          ("\\*\\vc-\\(incoming\\|outgoing\\).*"
           (display-buffer-at-bottom))))
  (setq window-combination-resize t)
  (setq even-window-sizes 'height-only)
  (setq window-sides-vertical nil)
  (setq switch-to-buffer-in-dedicated-window 'pop)
  ;; Hooks' syntax is controlled by the `use-package-hook-name-suffix'
  ;; variable.  The "-hook" suffix is intentional.
  :hook ((help-mode-hook . visual-line-mode)
         (custom-mode-hook . visual-line-mode))
  :bind (("s-n" . next-buffer)
         ("s-p" . previous-buffer)
         ("s-o" . other-window)
         ("s-2" . split-window-below)
         ("s-3" . split-window-right)
         ("s-0" . delete-window)
         ("s-1" . delete-other-windows)
         ("s-5" . delete-frame)
         ("C-x _" . balance-windows)
         ("C-x +" . balance-windows-area)
         ("s-q" . window-toggle-side-windows)))
#+end_src

Learnt from prot's [[https://www.youtube.com/watch?v=rjOhJMbA-q0&t=512s][video on window rules]]. Open current buffer in a new frame and delete the original window.
This can be very useful when the space for a compilmentary buffer (e.g. *info*) is not large enough.
#+begin_src emacs-lisp
(defun prot/make-frame-floating-with-current-buffer ()
  (interactive)
  (make-frame '((name . "脱出")
              (window-system . x)
              (minibuffer . nil)))
  (delete-window))

  (map! :desc "make floating frame" :ne "H-f" #'prot/make-frame-floating-with-current-buffer)
#+end_src

#+RESULTS:
** monocle-window
From prot's dotEmacs. Defines a monocole layout similar to Tiling window managers.
Currently the hyper-key(positioned at right ctrl on my xps-15) is used for window operations inside Emacs.
In the future I might replace dwm with exwm and the super key can be handled by Emacs in the X11 layer.
#+begin_src emacs-lisp
(use-package emacs
  :config
  (defvar prot/window-configuration nil
    "Current window configuration.
Intended for use by `prot/window-monocle'.")

  (define-minor-mode prot/window-single-toggle
    "Toggle between multiple windows and single window.
This is the equivalent of maximising a window.  Tiling window
managers such as DWM, BSPWM refer to this state as 'monocle'."
    :lighter " [M]"
    :global nil
    (if (one-window-p)
        (when prot/window-configuration
          (set-window-configuration prot/window-configuration))
      (setq prot/window-configuration (current-window-configuration))
      (delete-other-windows)))
  :bind ("s-s" . prot/window-single-toggle))
#+end_src

#+RESULTS:
: prot/window-single-toggle
* miscellaneous
** open in external app
#+begin_src emacs-lisp
(defun xah-open-in-external-app (&optional @fname)
  "Open the current file or dired marked files in external app.
The app is chosen from your OS's preference.

When called in emacs lisp, if @fname is given, open that.

URL `http://ergoemacs.org/emacs/emacs_dired_open_file_in_ext_apps.html'
Version 2019-11-04"
  (interactive)
  (let* (
         ($file-list
          (if @fname
              (progn (list @fname))
            (if (string-equal major-mode "dired-mode")
                (dired-get-marked-files)
              (list (buffer-file-name)))))
         ($do-it-p (if (<= (length $file-list) 5)
                       t
                     (y-or-n-p "Open more than 5 files? "))))
    (when $do-it-p
      (cond
       ((string-equal system-type "windows-nt")
        (mapc
         (lambda ($fpath)
           (w32-shell-execute "open" $fpath)) $file-list))
       ((string-equal system-type "darwin")
        (mapc
         (lambda ($fpath)
           (shell-command
            (concat "open " (shell-quote-argument $fpath))))  $file-list))
       ((string-equal system-type "gnu/linux")
        (mapc
         (lambda ($fpath) (let ((process-connection-type nil))
                            (start-process "" nil "xdg-open" $fpath))) $file-list))))))

(map! :desc "Open in external app" :ne "SPC e o" #'xah-open-in-external-app)
#+end_src

** transparency
Interactively toggle transparency in winframe.
#+begin_src emacs-lisp
(defun transparency (value)
  "sets the transparency of the frame window. 0=transparent/100=opaque"
  (interactive "ntransparency value 0 - 100 opaque:")
  (set-frame-parameter (selected-frame) 'alpha value))
#+end_src
** cursor in =-nw= mode
#+begin_src emacs-lisp
(unless (display-graphic-p)
        (require 'evil-terminal-cursor-changer)
        (evil-terminal-cursor-changer-activate) ; or (etcc-on)
        )
#+end_src
** dynamics module support
#+begin_src emacs-lisp
(setq module-file-suffix t)
#+end_src
** keyfreq stat
#+begin_src emacs-lisp
(keyfreq-mode 1)
(keyfreq-autosave-mode 1)
#+end_src
** disable backup/auto save
#+begin_src emacs-lisp
;disable backup
(setq backup-inhibited t)
;disable auto save
(setq auto-save-default nil)
#+end_src
** line number
Shortkey for toggling line numbers:
#+begin_src emacs-lisp
(map! :desc "line-number" :ne "SPC l n" #'display-line-numbers-mode)
#+end_src

Disable line number by default.
#+begin_src emacs-lisp
(defun nolinum ()
  (display-line-numbers-mode 0)
  (olivetti-mode 1)
  )

(defun viper-lisp-mode ()
  (display-line-numbers-mode 0)
  (olivetti-mode 1)
  (paren-face-mode 1)
  (rainbow-delimiters-mode 0)
  (paredit-mode)
  (lispy-mode))
(add-hook 'org-mode-hook 'nolinum)
(add-hook 'lisp-mode-hook 'viper-lisp-mode)
(add-hook 'emacs-lisp-mode-hook 'viper-lisp-mode)
#+end_src

#+RESULTS:
| nolinum | overseer-enable-mode | doom--setq-lisp-indent-function-for-emacs-lisp-mode-h | doom--setq-outline-regexp-for-emacs-lisp-mode-h | doom--setq-mode-name-for-emacs-lisp-mode-h | doom--setq-tab-width-for-emacs-lisp-mode-h | outline-minor-mode | rainbow-delimiters-mode | highlight-quoted-mode | +emacs-lisp-extend-imenu-h | +emacs-lisp-init-straight-maybe-h | doom--enable-+emacs-lisp-ert-mode-in-emacs-lisp-mode-h | parinfer-mode | lispy-mode | +evil-embrace-lisp-mode-hook-h | embrace-emacs-lisp-mode-hook |

** dashboard and init buffer
#+begin_src emacs-lisp :tangle nil
(require 'dashboard)
(dashboard-setup-startup-hook)
;; Or if you use use-package
(use-package dashboard
  :ensure t
  :config
  (dashboard-setup-startup-hook))
(setq dashboard-banner-logo-title "迟早会完蛋。")
(setq dashboard-items '((projects . 10)
                        (agenda . 10)))

(setq dashboard-set-init-info nil)
(setq dashboard-set-footer nil)
;;(setq dashboard-footer-messages '("迟早会完蛋。")
;;                                '("The big brother is watching you."))
#+end_src

#+RESULTS:
The init buffer is annoying when running emacsclient in terminal.
Scratch buffer is good enough.
#+begin_src emacs-lisp :tangle nil
(setq initial-buffer-choice "~/.doom.d/Splash.org")
#+end_src
** ivy-posframe
For unknown reason, ivy-posframe doesn't function normally after doom reloads. Such bug occurred after I upgraded to Emacs28/gccemacs and till now I haven't managed to find a solution to it.
#+begin_src emacs-lisp :tangle nil
(require 'ivy-posframe)
;; display at `ivy-posframe-style'
(setq ivy-posframe-display-functions-alist '((t . ivy-posframe-display-at-window-center)))
(setq ivy-posframe-parameters
      '((left-fringe . 8)
        (right-fringe . 8)))
(ivy-posframe-mode 1)
#+end_src

[[https://github.com/hlissner/doom-emacs/issues/2322][solution]]
#+begin_src emacs-lisp :tangle nil
(add-hook! 'doom-reload-hook #'posframe-delete-all)
#+end_src
** matlab-mode
#+begin_src emacs-lisp
(setq matlab-shell-command "/usr/local/MATLAB/R2020a/bin/matlab")
#+end_src

#+RESULTS:
: /usr/local/MATLAB/R2020a/bin/matlab

** focused-editing
#+begin_src emacs-lisp
(map! :desc "toggle olivetti-mode" :ne "SPC o v" #'olivetti-mode)
#+end_src

#+RESULTS:

** hl-line-mode
#+begin_src emacs-lisp
(setq-default global-hl-line-mode nil)
#+end_src

#+RESULTS:
** time, battery
#+begin_src emacs-lisp
(display-time-mode)
(display-battery-mode)
#+end_src

#+RESULTS:
: t
